// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/main/kotlin/com/zede/mol/viewTree/syntax/ViewTree.flex

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package com.zede.mol.viewTree;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import com.zede.mol.viewTree.psi.ViewTreeTypes;


class ViewTreeLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MAIN = 2;
  public static final int WAITING_VALUE = 4;
  public static final int DENT = 6;
  public static final int DENT2 = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\5\u0100\1\u0200\1\u0300\1\u0100\5\u0400\1\u0500\1\u0600"+
    "\1\u0700\6\u0100\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00"+
    "\3\u0100\1\u0e00\205\u0100\1\u0600\1\u0100\1\u0f00\1\u1000\1\u1100"+
    "\1\u1200\54\u0100\10\u1300\37\u0100\1\u0900\4\u0100\1\u1400\10\u0100"+
    "\1\u1500\2\u0100\1\u1600\1\u1700\1\u1200\1\u0100\1\u0500\1\u0100"+
    "\1\u1800\1\u1500\1\u0800\3\u0100\1\u1100\1\u1900\114\u0100\1\u1a00"+
    "\1\u1100\153\u0100\1\u1b00\11\u0100\1\u1c00\1\u1200\6\u0100\1\u1100"+
    "\u0f16\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\3\22\0\1\4\3\0\1\5"+
    "\5\0\1\6\1\7\1\0\1\10\1\11\1\12\12\13"+
    "\2\0\1\14\1\15\1\16\1\17\1\20\10\21\1\22"+
    "\4\21\1\23\14\21\1\0\1\24\1\0\1\25\1\21"+
    "\1\0\1\26\2\21\1\27\1\30\1\31\2\21\1\32"+
    "\2\21\1\33\1\21\1\34\3\21\1\35\1\36\1\37"+
    "\1\40\3\21\1\41\1\21\12\0\1\3\u01da\0\12\42"+
    "\206\0\12\42\306\0\12\42\234\0\12\42\166\0\12\42"+
    "\140\0\12\42\166\0\12\42\106\0\12\42\u0116\0\12\42"+
    "\106\0\12\42\u0146\0\12\42\46\0\12\42\u012c\0\12\42"+
    "\200\0\12\42\246\0\12\42\6\0\12\42\266\0\12\42"+
    "\126\0\12\42\206\0\12\42\6\0\12\42\316\0\2\3"+
    "\u01a6\0\12\42\46\0\12\42\306\0\12\42\26\0\12\42"+
    "\126\0\12\42\u0196\0\12\42\6\0\u0100\3\240\0\12\42"+
    "\206\0\12\42\u012c\0\12\42\200\0\12\42\74\0\12\42"+
    "\220\0\12\42\166\0\12\42\146\0\12\42\206\0\12\42"+
    "\106\0\12\42\266\0\12\42\u0164\0\62\42\100\0\12\42"+
    "\266\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[7424];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\3\1\5\1\6"+
    "\1\7\2\3\1\10\1\11\2\3\1\12\1\13\2\5"+
    "\1\14\1\15\4\5\1\1\1\16\1\2\1\17\1\20"+
    "\1\0\1\21\1\11\1\22\1\23\6\5\1\0\1\24"+
    "\1\5\1\25\4\5\1\0\2\5\1\26\1\27\1\5"+
    "\1\0\1\5\1\30\1\5\1\0\2\5\1\0\2\5"+
    "\1\0\1\31\1\5\1\31\1\32";

  private static int [] zzUnpackAction() {
    int [] result = new int[71];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\43\0\106\0\151\0\214\0\214\0\257\0\322"+
    "\0\214\0\214\0\365\0\u0118\0\214\0\u013b\0\u015e\0\u0181"+
    "\0\214\0\214\0\u01a4\0\u01c7\0\214\0\214\0\u01ea\0\u020d"+
    "\0\u0230\0\u0253\0\u0276\0\214\0\u0299\0\214\0\u02bc\0\u02df"+
    "\0\u0302\0\u0325\0\u0348\0\214\0\u036b\0\u038e\0\u03b1\0\u03d4"+
    "\0\u03f7\0\u041a\0\u043d\0\214\0\u0460\0\322\0\u0483\0\u04a6"+
    "\0\u04c9\0\u04ec\0\u050f\0\u0532\0\u0555\0\322\0\322\0\u0578"+
    "\0\u059b\0\u05be\0\322\0\u05e1\0\u0604\0\u0627\0\u064a\0\u066d"+
    "\0\u0690\0\u06b3\0\u06d6\0\322\0\u06f9\0\214\0\322";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[71];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\5\1\6\1\0\1\5\1\7\13\5\3\10\2\5"+
    "\14\10\3\5\1\6\1\0\1\11\1\7\1\12\1\13"+
    "\1\14\1\5\1\15\1\16\1\17\1\5\1\20\1\21"+
    "\1\22\1\10\1\23\1\24\1\25\1\26\3\10\1\27"+
    "\2\10\1\30\2\10\1\31\1\32\1\10\1\16\2\33"+
    "\1\6\40\33\1\34\1\35\1\36\1\0\37\34\64\0"+
    "\3\37\2\0\14\37\14\0\1\10\5\0\3\10\2\0"+
    "\14\10\14\0\1\16\6\0\1\40\17\0\1\16\4\0"+
    "\1\41\6\0\1\16\6\0\1\40\17\0\1\16\11\0"+
    "\1\42\1\0\1\16\26\0\1\16\15\0\1\43\42\0"+
    "\1\44\40\0\1\10\5\0\3\10\2\0\6\10\1\45"+
    "\5\10\14\0\1\10\5\0\3\10\2\0\1\46\13\10"+
    "\14\0\1\10\5\0\3\10\2\0\1\47\13\10\14\0"+
    "\1\10\5\0\3\10\2\0\12\10\1\50\1\10\14\0"+
    "\1\10\5\0\3\10\2\0\7\10\1\51\4\10\14\0"+
    "\1\10\5\0\3\10\2\0\6\10\1\52\5\10\1\0"+
    "\2\33\1\0\40\33\1\0\1\35\54\0\1\37\5\0"+
    "\3\37\2\0\14\37\35\0\1\53\6\0\2\41\1\0"+
    "\40\41\13\0\1\42\26\0\1\42\16\0\1\54\37\0"+
    "\1\10\5\0\3\10\2\0\3\10\1\55\10\10\14\0"+
    "\1\10\5\0\2\10\1\56\2\0\14\10\14\0\1\10"+
    "\5\0\3\10\2\0\5\10\1\57\6\10\14\0\1\10"+
    "\5\0\3\10\2\0\5\10\1\60\6\10\14\0\1\10"+
    "\5\0\3\10\2\0\12\10\1\61\1\10\14\0\1\10"+
    "\5\0\3\10\2\0\1\10\1\62\12\10\32\0\1\63"+
    "\24\0\1\10\5\0\3\10\2\0\4\10\1\64\7\10"+
    "\14\0\1\10\5\0\3\10\2\0\10\10\1\65\3\10"+
    "\14\0\1\10\5\0\3\10\2\0\5\10\1\66\6\10"+
    "\14\0\1\10\5\0\3\10\2\0\2\10\1\67\11\10"+
    "\14\0\1\10\5\0\3\10\2\0\2\10\1\70\11\10"+
    "\33\0\1\71\23\0\1\10\5\0\3\10\2\0\6\10"+
    "\1\72\5\10\14\0\1\10\5\0\3\10\2\0\2\10"+
    "\1\73\11\10\14\0\1\10\5\0\3\10\2\0\3\10"+
    "\1\74\10\10\35\0\1\75\21\0\1\10\5\0\3\10"+
    "\2\0\4\10\1\76\7\10\14\0\1\10\5\0\3\10"+
    "\2\0\4\10\1\77\7\10\33\0\1\100\23\0\1\10"+
    "\5\0\3\10\2\0\11\10\1\101\2\10\14\0\1\10"+
    "\5\0\3\10\2\0\6\10\1\102\5\10\40\0\1\103"+
    "\16\0\1\10\5\0\3\10\2\0\13\10\1\104\14\0"+
    "\1\10\5\0\3\10\2\0\2\10\1\105\11\10\42\0"+
    "\1\106\14\0\1\10\5\0\3\10\2\0\1\10\1\107"+
    "\12\10\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[1820];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\1\2\11\2\1\2\11\2\1\1\11\3\1"+
    "\2\11\2\1\2\11\5\1\1\11\1\1\1\11\1\1"+
    "\1\0\3\1\1\11\6\1\1\0\1\11\6\1\1\0"+
    "\5\1\1\0\3\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[71];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private int prevDent = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ViewTreeLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(MAIN); return ViewTreeTypes.VALUE;
            }
          // fall through
          case 27: break;
          case 2:
            { int dent = yylength();
        if (dent == prevDent) {
            yybegin(dent == 0 ? YYINITIAL : MAIN);
        } else if (dent > prevDent) {
            yybegin(MAIN);
            prevDent += 1;
            return ViewTreeTypes.INDENT;
        } else {
            yybegin(yystate() == DENT ? DENT2 : DENT);
            prevDent -= 1;
            yypushback(dent);
            return ViewTreeTypes.DEDENT;
        }
            }
          // fall through
          case 28: break;
          case 3:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 29: break;
          case 4:
            { if (zzMarkedPosL == zzEndReadL) {
        yypushback(1);
    }
    yybegin(DENT);
    return ViewTreeTypes.LF;
            }
          // fall through
          case 30: break;
          case 5:
            { yybegin(MAIN); return ViewTreeTypes.NAME;
            }
          // fall through
          case 31: break;
          case 6:
            { yybegin(MAIN); return ViewTreeTypes.SPACE;
            }
          // fall through
          case 32: break;
          case 7:
            { yybegin(MAIN); return ViewTreeTypes.OPERATOR_OBJECT;
            }
          // fall through
          case 33: break;
          case 8:
            { yybegin(MAIN); return ViewTreeTypes.OPERATOR_ARRAY;
            }
          // fall through
          case 34: break;
          case 9:
            { yybegin(MAIN); return ViewTreeTypes.NUMBER;
            }
          // fall through
          case 35: break;
          case 10:
            { yybegin(MAIN); return ViewTreeTypes.OPERATOR_ATOM;
            }
          // fall through
          case 36: break;
          case 11:
            { yybegin(MAIN); return ViewTreeTypes.OPERATOR_LOCALISATION;
            }
          // fall through
          case 37: break;
          case 12:
            { yybegin(WAITING_VALUE); return ViewTreeTypes.VALUE_PREFIX;
            }
          // fall through
          case 38: break;
          case 13:
            { yybegin(MAIN); return ViewTreeTypes.OPERATOR_REASSIGN;
            }
          // fall through
          case 39: break;
          case 14:
            { if (prevDent == 0)
            yybegin(YYINITIAL);
        else
            yybegin(MAIN);
            }
          // fall through
          case 40: break;
          case 15:
            { if (prevDent == 0) {
            yybegin(YYINITIAL);
            return ViewTreeTypes.LF;
        } else {
            yybegin(yystate() == DENT ? DENT2 : DENT);
            prevDent -= 1;
            yypushback(1);
            return ViewTreeTypes.DEDENT;
        }
            }
          // fall through
          case 41: break;
          case 16:
            { yybegin(MAIN); return ViewTreeTypes.FQN_NAME;
            }
          // fall through
          case 42: break;
          case 17:
            { yybegin(MAIN); return ViewTreeTypes.COMMENT;
            }
          // fall through
          case 43: break;
          case 18:
            { yybegin(MAIN); return ViewTreeTypes.OPERATOR_LEFT_BIND;
            }
          // fall through
          case 44: break;
          case 19:
            { yybegin(MAIN); return ViewTreeTypes.OPERATOR_RIGHT_BIND;
            }
          // fall through
          case 45: break;
          case 20:
            { yybegin(MAIN); return ViewTreeTypes.OPERATOR_TWO_WAY_BIND;
            }
          // fall through
          case 46: break;
          case 21:
            { yybegin(MAIN); return ViewTreeTypes.CONST_NAN;
            }
          // fall through
          case 47: break;
          case 22:
            { yybegin(MAIN); return ViewTreeTypes.CONST_NULL;
            }
          // fall through
          case 48: break;
          case 23:
            { yybegin(MAIN); return ViewTreeTypes.CONST_TRUE;
            }
          // fall through
          case 49: break;
          case 24:
            { yybegin(MAIN); return ViewTreeTypes.CONST_FALSE;
            }
          // fall through
          case 50: break;
          case 25:
            { yybegin(MAIN); return ViewTreeTypes.CONST_INFINITY;
            }
          // fall through
          case 51: break;
          case 26:
            { yybegin(MAIN); return ViewTreeTypes.CONST_UNDEFINED;
            }
          // fall through
          case 52: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
