{
  parserClass="com.zede.mol.viewTree.parser.ViewTreeParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="ViewTree"
  psiImplClassSuffix="Impl"
  psiPackage="com.zede.mol.viewTree.psi"
  psiImplPackage="com.zede.mol.viewTree.psi.impl"

  elementTypeHolderClass="com.zede.mol.viewTree.psi.ViewTreeTypes"
  elementTypeClass="com.zede.mol.viewTree.psi.ViewTreeElementType"
  tokenTypeClass="com.zede.mol.viewTree.psi.ViewTreeTokenType"
}

viewTreeFile ::= (component|LF)*

private gap ::= (SPACE+ COMMENT)? (COMMENT|LF)+
private instance ::= NAME|FQN_NAME
private multiplex ::= (OPERATOR_ATOM|OPERATOR_OBJECT) (SPACE* NAME)?

component ::= instance SPACE+ instance gap componentAttributes?
componentAttributes ::= INDENT (componentAttribute)+ DEDENT
private componentAttribute ::= NAME multiplex? SPACE+ componentValue
private componentValue ::= simpleValue | leftBindValue | rightBindValue | twoWayBindValue
private simpleValue ::= stringValue | numberValue | arrayValue | objectValue | constValue
private constValue ::= (CONST_TRUE | CONST_FALSE | CONST_NAN | CONST_NULL | CONST_UNDEFINED | CONST_INFINITY) gap

private stringValue ::= (OPERATOR_LOCALISATION SPACE+)? VALUE_PREFIX ((multilineStringValue gap?) | (VALUE? gap))
private numberValue ::= NUMBER gap
private arrayValue ::= OPERATOR_ARRAY (NAME|FQN_NAME)? ((gap arrayItemsValue?)| SPACE+ componentValue)
private objectValue ::= OPERATOR_OBJECT ((gap objectKeysValue) | SPACE+ componentAttribute*)

multilineStringValue ::= LF INDENT (VALUE_PREFIX VALUE? LF)* DEDENT
arrayItemsValue ::= INDENT componentValue* DEDENT
objectKeysValue ::= INDENT (OPERATOR_REASSIGN gap)? componentAttribute* DEDENT

private leftBindValue ::= OPERATOR_LEFT_BIND SPACE+ NAME multiplex? SPACE* ((FQN_NAME gap componentAttributes?)|simpleValue|gap)?
private rightBindValue ::= OPERATOR_RIGHT_BIND SPACE+ NAME multiplex? SPACE* ((FQN_NAME gap componentAttributes?)|simpleValue|gap)?
private twoWayBindValue ::= OPERATOR_TWO_WAY_BIND SPACE+ NAME multiplex? SPACE* (gap | simpleValue)
